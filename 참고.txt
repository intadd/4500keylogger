https://docs.microsoft.com/en-us/windows/console/getconsolewindow
-콘솔 창 관련 함수

https://msdn.microsoft.com/ko-kr/library/windows/desktop/ms633548(v=vs.85).aspx
-콘솔 창 숨기기 관련함수

https://msdn.microsoft.com/ko-kr/library/windows/desktop/ms724923(v=vs.85).aspx
- RegSetValueEx 함수

https://msdn.microsoft.com/ko-kr/library/windows/desktop/ms724897.aspx
- RegOpenKeyEx 함수

HWND a = GetConsoleWindow();
호출 한 프로세스와 연결된 콘솔에서 사용되는 창 핸들을 검색합니다. -> 즉, 현재 실행되는 코드의 콘솔창을 검색해서 HWND에 반환한다. 연관된 콘솔이 없을 경우에는 NULL을 반환한다.

HWND -> 간단하게 말하면 윈도우 핸들이라고 보면 된다.

ShowWindow(a, SW_HIDE);

a를 숨김 상태로 지정한다.

ShowWindow(HWND, nCmdShow);
지정된 윈도우의 표시 상태를 지정하는 함수이다.

nCmdShow -> 창 표시 상태를 제어
여기서 우리는 'SW_HIDE'를 사용한다.
SW_HIDE = 현 윈도우 창을 숨기고 다른 윈도우를 활성화한다.

ShellExecute(NULL, "open", argv[0], NULL, NULL, SW_HIDE);
현재 경로에 있는 파일을 창이 안 보이게 연다.

ShellExecute(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd)
지정된 파일에 대한 작업을 수행하는 함수이다.

hwnd = UI 또는 오류 메시지를 표시하는 데에 사용되는 부모 윈도우의 핸들.
* 조작이 윈도우와 관련이 없는 경우 이 값은 NULL로 설정이 가능하다.

lpOperation = 수행할 조치를 지정하는 널종료 형식의 문자열에 대한 포인터이다.
- 우리의 경우는 파일을 실행하여야 하므로 "open"을 사용하였다.
open - IpFile 매개변수로 지정된 항목을 여는 명령어이다. 항목은 파일 또는 폴더가 될 수 있다.

lpFile = 지정된 Operation을 실행할 파일 또는 오브젝트를 지정하는 널종료 형식의 문자열에 대한 포인터.

nShowCmd - 그것이 열릴때 어떻게 표시할 지 제어.
SW_HIDE - 창을 숨기고 다른 창 활성화

RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"), 0L,
		KEY_WRITE, &hKey);

전체 사용자에 대한 지속용 시작 프로그램 레지스트리에 대한 키를 쓰기 용으로 연다.

RegOpenKeyEx(hKey, lpSubKey, ulOption, samDesired, phkResult);
hKey = 열려있는 레지스트리의 핸들
* 특정 함수를 통한 리턴값을 넣어주기도 하지만, 사전 정의된 값을 직접 지정할 수도 있다. 우리의 경우는 전체 사용자의 레지스트리를 편집하기 위해서 'HKEY_LOCAL_MACHINE'을 사용하였다.

lpSubKey = 오픈할 하위 레지스트리의 이름
* 우리는 시작프로그램 중에서 지속적으로 영향을 미치는 시작프로그램을 이용해야 했기 때문에 위와 같은 형태로 경로를 넘겨주었다.

ulOption = 키를 열 때 적용할 옵션 지정
별 필요가 없어서 0으로 지정하였다.

samDesired = 열 수 있는 키에 대해서 원하는 액세스 권한을 지정하는 마스크이다. 키의 보안 디스크립터가 호출 프로세스에 대해 요청된 액세스를 허용하지 않으면 함수가 실패한다.

phkResult = 열린 키의 핸들을 받는 변수에 대한 포인터이다.
* 미리 정의되어있던 hKey의 주소를 넘겨주었다.

error = RegSetValueEx(hKey, TEXT("PhaseKiller"), 0, REG_SZ, (BYTE*)lpPosition, lstrlen(lpPosition));

리턴받은 핸들키에 특정 이름을 가진 레지스트리를 REG_SZ형식으로 만들고 lpPosition 프로그램으로 값을 등록한다.

RegSetValueEx(hKey, lpValueName, Reserved, dwType, *lpData, cbData);

레지스트리 키의 특정 값에 대한 데이터와 형식을 설정한다.

hKey = 열린 레지스트리 키에 대한 핸들.
*이미 시작 프로그램 레지스트리를 건내받은 hKey를 넘겨주었다.

lpValueName = 설정될 변수의 이름.
*PhaseKiller로 설정.

Reserved = 뭐인지는 모르겠으나 반드시 0으로 지정해야 한다고 해서 0으로 지정하였다.

dwType = lpData 매개 변수가 가리키는 데이터 유형.
REG_SZ로 지정

lpData = 저장되어야 할 데이터

cbData = lpData 매개변수에 의해서 포인팅되는 정보의 크기를 byte로 저장.